// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// convex_clusterpath
Rcpp::List convex_clusterpath(const Eigen::MatrixXd& X, const Eigen::MatrixXi& W_idx, const Eigen::VectorXd& W_val, const Eigen::VectorXd& lambdas, const double eps_conv, const double eps_fusions, const bool scale, const bool save_clusterpath, const int burnin_iter, const int max_iter_conv);
RcppExport SEXP _CCMMR_convex_clusterpath(SEXP XSEXP, SEXP W_idxSEXP, SEXP W_valSEXP, SEXP lambdasSEXP, SEXP eps_convSEXP, SEXP eps_fusionsSEXP, SEXP scaleSEXP, SEXP save_clusterpathSEXP, SEXP burnin_iterSEXP, SEXP max_iter_convSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type W_idx(W_idxSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type W_val(W_valSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const double >::type eps_conv(eps_convSEXP);
    Rcpp::traits::input_parameter< const double >::type eps_fusions(eps_fusionsSEXP);
    Rcpp::traits::input_parameter< const bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_clusterpath(save_clusterpathSEXP);
    Rcpp::traits::input_parameter< const int >::type burnin_iter(burnin_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter_conv(max_iter_convSEXP);
    rcpp_result_gen = Rcpp::wrap(convex_clusterpath(X, W_idx, W_val, lambdas, eps_conv, eps_fusions, scale, save_clusterpath, burnin_iter, max_iter_conv));
    return rcpp_result_gen;
END_RCPP
}
// convex_clustering
Rcpp::List convex_clustering(const Eigen::MatrixXd& X, const Eigen::MatrixXi& W_idx, const Eigen::VectorXd& W_val, const double eps_conv, const double eps_fusions, const bool scale, const bool save_clusterpath, const int burnin_iter, const int max_iter_conv, const int target_low, const int target_high, const int max_iter_phase_1, const int max_iter_phase_2, const int verbose, const double lambda_init, const double factor);
RcppExport SEXP _CCMMR_convex_clustering(SEXP XSEXP, SEXP W_idxSEXP, SEXP W_valSEXP, SEXP eps_convSEXP, SEXP eps_fusionsSEXP, SEXP scaleSEXP, SEXP save_clusterpathSEXP, SEXP burnin_iterSEXP, SEXP max_iter_convSEXP, SEXP target_lowSEXP, SEXP target_highSEXP, SEXP max_iter_phase_1SEXP, SEXP max_iter_phase_2SEXP, SEXP verboseSEXP, SEXP lambda_initSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type W_idx(W_idxSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type W_val(W_valSEXP);
    Rcpp::traits::input_parameter< const double >::type eps_conv(eps_convSEXP);
    Rcpp::traits::input_parameter< const double >::type eps_fusions(eps_fusionsSEXP);
    Rcpp::traits::input_parameter< const bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_clusterpath(save_clusterpathSEXP);
    Rcpp::traits::input_parameter< const int >::type burnin_iter(burnin_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter_conv(max_iter_convSEXP);
    Rcpp::traits::input_parameter< const int >::type target_low(target_lowSEXP);
    Rcpp::traits::input_parameter< const int >::type target_high(target_highSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter_phase_1(max_iter_phase_1SEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter_phase_2(max_iter_phase_2SEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_init(lambda_initSEXP);
    Rcpp::traits::input_parameter< const double >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(convex_clustering(X, W_idx, W_val, eps_conv, eps_fusions, scale, save_clusterpath, burnin_iter, max_iter_conv, target_low, target_high, max_iter_phase_1, max_iter_phase_2, verbose, lambda_init, factor));
    return rcpp_result_gen;
END_RCPP
}
// fusion_threshold
double fusion_threshold(const Eigen::MatrixXd X, const double tau);
RcppExport SEXP _CCMMR_fusion_threshold(SEXP XSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(fusion_threshold(X, tau));
    return rcpp_result_gen;
END_RCPP
}
// sparse_weights
Rcpp::List sparse_weights(const Eigen::MatrixXd& X, const Eigen::MatrixXi& indices, const Eigen::MatrixXd& distances, const double phi, const int k, const bool connected, const bool scale);
RcppExport SEXP _CCMMR_sparse_weights(SEXP XSEXP, SEXP indicesSEXP, SEXP distancesSEXP, SEXP phiSEXP, SEXP kSEXP, SEXP connectedSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type connected(connectedSEXP);
    Rcpp::traits::input_parameter< const bool >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_weights(X, indices, distances, phi, k, connected, scale));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CCMMR_convex_clusterpath", (DL_FUNC) &_CCMMR_convex_clusterpath, 10},
    {"_CCMMR_convex_clustering", (DL_FUNC) &_CCMMR_convex_clustering, 16},
    {"_CCMMR_fusion_threshold", (DL_FUNC) &_CCMMR_fusion_threshold, 2},
    {"_CCMMR_sparse_weights", (DL_FUNC) &_CCMMR_sparse_weights, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_CCMMR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
